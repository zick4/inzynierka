<?php

/**
 * Photo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Photo extends Base_Photo
{

    /**
     * Zwraca nazwę pliku ze zdjęciem
     * 
     * @return string
     */
    public function getPhotoFileName()
    {
        return $this->id . '.' . $this->extension;
    }

    public function flip()
    {
        $oImage = new Gmagick();
        $oImage->readImage($this->getPath().$this->getPhotoFileName());
        $oImage->flipImage();
        $oImage->writeImage($this->getPath().$this->getPhotoFileName());
        $oImage->destroy();
    }

    public function flop()
    {
        $oImage = new Gmagick();
        $oImage->readImage($this->getPath().$this->getPhotoFileName());
        $oImage->flopImage();
        $oImage->writeImage($this->getPath().$this->getPhotoFileName());
        $oImage->destroy();
    }

    /**
     * Koordynaty
     *
     * x - współrzędna x
     * y - współrzędna y
     * width - szerokość
     * height - wysokość
     *
     * @param array $aParams
     */
    public function crop(array $aParams)
    {
        if (empty($aParams['width']) || empty($aParams['height']) || empty($aParams['x']) || empty($aParams['y']))
        {
            throw new InvalidArgumentException("Tablica niezawiera odpowiednich danych");
        }
        $oImage = new Gmagick();
        $oImage->readImage($this->getPath().$this->getPhotoFileName());
        $oImage->cropimage($aParams['width'], $aParams['height'], $aParams['x'], $aParams['y']);
        $oImage->writeImage($this->getPath().$this->getPhotoFileName());
        $oImage->destroy();
    }
    
    public function charcoal()
    {
        $oImage = new Gmagick();
        $oImage->readImage($this->getPath().$this->getPhotoFileName());
        $oImage->charcoalImage(5, 0.2);
        $oImage->writeImage($this->getPath().$this->getPhotoFileName());
        $oImage->destroy();
    }

    public function oilPaint()
    {
        $oImage = new Gmagick();
        $oImage->readImage($this->getPath().$this->getPhotoFileName());
        $oImage->oilPaintImage(2.5);
        $oImage->writeImage($this->getPath().$this->getPhotoFileName());
        $oImage->destroy();
    }

    /**
     * Zwraca nazwę pliku z miniaturką zdjęcia
     *
     * @return string
     */
    public function getPhotoMinFileName()
    {
        return $this->id . '-min.' . $this->extension;
    }

    /**
     * Zwraca roszerzenie pliku
     * @param string $sFilename
     * @return string
     */
    public static function findExtension($sFilename)
    {
        $tmp = explode(".", strtolower($sFilename));
        return $tmp[count($tmp) - 1];
    }

    /**
     * Tworzenie miniatury
     *
     * @param int $iWidth
     * @param int $iHeight
     * @throws PhotoException - gdy nie uda się utworzyć miniaturki
     */
    public function makeMiniature($iWidth = 100, $iHeight = 0)
    {

        $image = new Gmagick($this->getPath() . $this->getPhotoFileName());
        $image->thumbnailImage($iWidth, $iHeight);
        $image->write($this->getPath() . $this->getPhotoMinFileName());
    }

    /**
     * Usuwanie obrazkas
     * @param Doctrine_Connection $conn
     */
    public function delete(Doctrine_Connection $conn = null)
    {
        // usuwanie fotki i miniaturki z dysku
        unlink($this->getPath() . $this->getPhotoFileName());
        unlink($this->getPath() . $this->getPhotoMinFileName());
        parent::delete($conn);
    }

    /**
     * Bezwzględna ścieżka dla obrazków
     * @return string
     */
    public function getPath()
    {
        return PUBLIC_DIR . $this->Album->getDir();
    }

}